name: "Test Mulapizi Compilation"

on:
    push:
        branches:
        - main
    pull_request:
        branches:
        - main

jobs:
  test_application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Up Make Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y make gcc libsqlite3-dev valgrind libxml2-utils xmlstarlet

      - name: Compile Mulapizi
        run: |
          make
      
      #- name: Run Tests
      # run: |
      #    make test
      
      - name: Run Valgrind and Create Memory Leakege report
        run: |
          printf "Q" | valgrind --leak-check=full --track-origins=yes --xml=yes --xml-file=memory_leaks_report.txt ./bin/DevAuth || true
          chmod +x report.sh && ./report.sh

      - name: Read memory leak report
        id: read_report
        run: |
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat memory_leaks_report.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Memory Leak Report on PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Memory Leaks Report**
            ```
            $(cat memory_leaks_report.txt)
            ```

      - name: Open Issue for Memory Leak Report on Push
        id: create_issue
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v4
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('memory_leaks_report.txt', 'utf8');
            const issueTitle = "Memory Leak Report";
            const issueBody = `**Memory Leaks Report**\n\n\`\`\`\n${report}\n\`\`\``;
            await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody
            });
      
      - name: Fallback - Commit report to Repo if Issue Creation fails
        if: failure() && github.event_name != 'pull_request'
        run: |
          mkdir -p reports
          cp memory_leaks_report.txt reports/memory_leaks_report_$(date +%Y%m%d%H%M%S).txt
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add reports/
          git commit -m "chore: add fallback memory leak report"
          git push


      - name: Clean Up
        run: |
          make clean
